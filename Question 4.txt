The count-and-say sequence is the sequence of integers beginning as follows:

1, 11, 21, 1211, 111221, ...
1 is read off as one 1 or 11.
11 is read off as two 1s or 21.

21 is read off as one 2, then one 1 or 1211.

Given an integer n, generate the nth sequence.

Note: The sequence of integers will be represented as a string.

Example:

if n = 2,
the sequence is 11.



Python Solution:

def fn(s,n):
    if n==1:
        return s
    a = len(s)
    i =0
    x = s[0]
    y = ""
    while(i<a):
        t = 0
        while(i<a and s[i]==x):
            t +=1
            i +=1
        y += str(t)+x
        if i<a:
            x = s[i]
    return fn(y,n-1)
class Solution:
    # @param A : integer
    # @return a strings
    def countAndSay(self, A):
        n = A
        s = "1"
        if n==1:
            return s
        return fn(s,n)


C++ Solution:

class Solution {
public:
    string countAndSay(int n) {
        if (n == 0) return "";  
        if (n == 1) return "1";

        string prev = "1";
        string current = prev;

        for (int seqNum = 2; seqNum <= n; seqNum++) {    // run from starting to generate second string

            current.clear();
            //cheack all digits in the string
            for (int j = 0; j < prev.length(); j++) {

                int count = 1; // we have at least 1 occourence of each digit

                // get the number of times same digit occurred (be carefull with the end of the string)
                while ((j + 1 < prev.length()) && (prev[j] == prev[j + 1])) {
                    count++;    
                    j++;        // we need to keep increasing the index inside of the string
                }

                // add to new string "count" + "digit itself"
                current.append(to_string(count) + prev[j]);
            }

            // save temporary result
            prev = current;
        }

        return current;        
    }
};