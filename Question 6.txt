Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Here are few examples.

[1,3,5,6], 5 → 2
[1,3,5,6], 2 → 1
[1,3,5,6], 7 → 4
[1,3,5,6], 0 → 0


Python Solution:

class Solution:
    # @param A : list of integers
    # @param B : integer
    # @return an integer
    def searchInsert(self, A, B):
        def binarySearch(arr, l, r, x): 
            switch = 0
            while l <= r: 
          
                mid = (l+r)/2; 
                  
                # Check if x is present at mid 
                if arr[mid] == x: 
                    return mid 
          
                # If x is greater, ignore left half 
                elif arr[mid] < x: 
                    l = mid + 1
                    switch = 1
          
                # If x is smaller, ignore right half 
                else: 
                    r = mid - 1
                    switch = 0
              
            # If we reach here, then the element was not present 
            if switch == 0:
                return mid
            elif switch == 1:
                return mid+1
        return binarySearch (A, 0, len(A)-1, B)